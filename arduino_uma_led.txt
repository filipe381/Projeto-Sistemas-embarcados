// Pinos do Arduino utilizados
int PinTrigger = 5;     // pino usado para disparar os pulsos do sensor
int PinEcho = 6;        // pino usado para ler a saída do sensor
int PinLEDverde = 2;    // pino usado pelo LED verde
int PinBuzzer = A0;     // pino usado pelo buzzer

// Constantes
const int atraso = 200;       // tempo de espera do loop
const int LimiteLEDverde = 25; // Limite de distância para acender o LED verde
const int LimiteBuzzer = 15;   // Limite de distância para ativar o buzzer
const float velocidadeSom_mpus = 0.000340;  // em metros por microsegundo

// Inicialização
void setup() {
  pinMode(PinTrigger, OUTPUT);      // configura pino Trigger como saída
  digitalWrite(PinTrigger, LOW);    // pino Trigger - nível baixo
  pinMode(PinEcho, INPUT);          // configura pino ECHO como entrada
  pinMode(PinLEDverde, OUTPUT);     // configura pino LED verde como saída
  pinMode(PinBuzzer, OUTPUT);       // configura pino Buzzer como saída
  Serial.begin(9600);               // inicializa monitor serial 9600 Bps (debug)
  desligaSinais();                  // Garante que o LED e o buzzer estejam desligados inicialmente
}

// Loop principal
void loop() {
  float Distancia = MedeDistancia();
  
  if (Distancia <= LimiteBuzzer) {
    // Se a distância for menor ou igual a 15 cm, o buzzer apita
    tone(PinBuzzer, 1000); // 1000 Hz de frequência
    digitalWrite(PinLEDverde, LOW); // Garante que o LED verde esteja apagado
  } else if (Distancia <= LimiteLEDverde) {
    // Se a distância for entre 25 e 15 cm, o LED verde acende
    digitalWrite(PinLEDverde, HIGH);
    noTone(PinBuzzer); // Garante que o buzzer esteja desligado
  } else {
    // Se a distância for maior que 25 cm, desliga o LED verde e o buzzer
    desligaSinais();
  }

  Serial.print("Distância em centímetros: ");  // mostra no monitor serial
  Serial.print(Distancia);                     // mostra a distância medida
  Serial.println();
  delay(atraso);                               // tempo de atraso
}

// Envia um pulso de 10 µs
void DisparaPulsoUltrassonico() {
  digitalWrite(PinTrigger, HIGH);  // pulso alto de Trigger
  delayMicroseconds(10);           // atraso de 10 microsegundos
  digitalWrite(PinTrigger, LOW);   // pulso baixo de Trigger
}

// Calcula a distância com base no tempo do pulso
float CalculaDistancia(float tempo_us) {
  return (tempo_us * velocidadeSom_mpus) / 2;  // calcula distância em metros
}

// Mede a distância do sensor ultrassônico
float MedeDistancia() {
  float TempoEcho = 0;                       // variável tempo do eco
  DisparaPulsoUltrassonico();                // dispara pulso ultrassônico
  TempoEcho = pulseIn(PinEcho, HIGH);        // mede duração do pulso HIGH de eco em microsegundos
  return CalculaDistancia(TempoEcho) * 100;  // retorna distância em cm
}

// Desliga o LED verde e o buzzer
void desligaSinais() {
  digitalWrite(PinLEDverde, LOW);
  noTone(PinBuzzer);
}

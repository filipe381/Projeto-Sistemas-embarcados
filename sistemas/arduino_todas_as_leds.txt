// Pinos do Arduino utilizados
int PinTrigger = 5;    
int PinEcho = 6;        
int PinLEDverde = 2;   
int PinLEDvermelho = 3;
int PinLEDazul = 4;    
int PinBuzzer = A0;     

// Constantes
const int atraso = 200;       
const int LimiteLEDazul = 45;
const int LimiteLEDvermelho = 35;
const int LimiteLEDverde = 25; 
const int LimiteBuzzer = 15;   
const float velocidadeSom_mpus = 0.000340;  

// Inicialização
void setup() {
  pinMode(PinTrigger, OUTPUT);      
  digitalWrite(PinTrigger, LOW);    
  pinMode(PinEcho, INPUT);         
  pinMode(PinLEDverde, OUTPUT);
  pinMode(PinLEDazul, OUTPUT);
  pinMode(PinLEDvermelho, OUTPUT);   
  pinMode(PinBuzzer, OUTPUT);       
  Serial.begin(9600);               
  desligaSinais();                  
}

// Loop principal
void loop() {
  float Distancia = MedeDistancia();
  
  if (Distancia <= LimiteBuzzer) {
    tone(PinBuzzer, 1000); 
    digitalWrite(PinLEDverde, LOW); 
    digitalWrite(PinLEDvermelho, LOW);
    digitalWrite(PinLEDazul, LOW);
  } else if (Distancia <= LimiteLEDverde) {
    digitalWrite(PinLEDverde, HIGH);
    digitalWrite(PinLEDvermelho, LOW);
    digitalWrite(PinLEDazul, LOW);
    noTone(PinBuzzer); 
  } else if (Distancia <= LimiteLEDvermelho) {
    digitalWrite(PinLEDverde, LOW);
    digitalWrite(PinLEDvermelho, HIGH);
    digitalWrite(PinLEDazul, LOW);
    noTone(PinBuzzer);
  } else if (Distancia <= LimiteLEDazul){
    digitalWrite(PinLEDverde, LOW);
    digitalWrite(PinLEDvermelho, LOW);
    digitalWrite(PinLEDazul, HIGH);
    noTone(PinBuzzer);
  } else {
    desligaSinais();
  }

  Serial.print("Distância em centímetros: "); 
  Serial.print(Distancia);                     
  Serial.println();
  delay(atraso);                               
}

// Envia um pulso de 10 µs
void DisparaPulsoUltrassonico() {
  digitalWrite(PinTrigger, HIGH);  // pulso alto de Trigger
  delayMicroseconds(10);           // atraso de 10 microsegundos
  digitalWrite(PinTrigger, LOW);   // pulso baixo de Trigger
}

// Calcula a distância com base no tempo do pulso
float CalculaDistancia(float tempo_us) {
  return (tempo_us * velocidadeSom_mpus) / 2;  // calcula distância em metros
}

// Mede a distância do sensor ultrassônico
float MedeDistancia() {
  float TempoEcho = 0;                       // variável tempo do eco
  DisparaPulsoUltrassonico();                // dispara pulso ultrassônico
  TempoEcho = pulseIn(PinEcho, HIGH);        // mede duração do pulso HIGH de eco em microsegundos
  return CalculaDistancia(TempoEcho) * 100;  // retorna distância em cm
}


void desligaSinais() {
  digitalWrite(PinLEDverde, LOW);
  noTone(PinBuzzer);
  digitalWrite(PinLEDvermelho, LOW);
  digitalWrite(PinLEDazul, LOW);
}
